{"version":3,"sources":["Counters.js","App.js","registerServiceWorker.js","index.js"],"names":["FormatedAmount","total","amount","value","currency","code","minority","Counters","totalProfit","interval","className","size","calculateDataFactory","investments","startCapital","intervals","rate","pRate","Number","pInvestments","pStartCapital","pIntervals","dataPoints","i","lastPoint","calculateData","App","state","handleRatioForm","setState","handleInvestments","handleStartCapital","handleInterval","options","label","onChange","this","String","type","width","dataPoints0","dataPoints25","dataPoints75","dataPoints100","diff","percent","baseStyle","fill","lineTension","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBorderWidth","pointRadius","pointHitRadius","pointHoverBorderColor","data","labels","Array","Math","max","keys","map","item","datasets","backgroundColor","borderColor","pointBorderColor","pointHoverBackgroundColor","AMOUNT","REINVEST","length","toFixed","heigth","invest0","invest25","invest75","invest100","theme","renderRatioForm","renderInvestments","renderStartCapital","renderInterval","renderChart","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e957821c.chunk.js","sourcesContent":["import React from \"react\";\nimport Label from \"arui-feather/label/label\";\nimport \"./counter.css\";\nimport Amount from \"arui-feather/amount\";\nimport Heading from \"arui-feather/heading\";\n\nconst MINORITY = 100000;\n\nconst FormatedAmount = ({ total }) => (\n  <Amount\n    amount={{\n      value: total * MINORITY,\n      currency: {\n        code: \"RUR\",\n        minority: MINORITY\n      }\n    }}\n  />\n);\n\nexport const Counters = ({ totalProfit, interval }) => (\n  <div className=\"counters\">\n    <Heading size='s'>Доход от процентов:</Heading>\n    <Label>\n      в год: <FormatedAmount total={totalProfit / (interval / 12)} />\n    </Label>\n    <Label>\n      в месяц: <FormatedAmount total={totalProfit / interval} />\n    </Label>\n    <Label>\n      в день: ~<FormatedAmount total={totalProfit / interval / 30} />\n    </Label>\n    <Label>\n      в час: ~<FormatedAmount total={totalProfit / interval / 30 / 24} />\n    </Label>\n    <Label>\n      в минуту: ~\n      <FormatedAmount total={totalProfit / interval / 30 / 24 / 60} />\n    </Label>\n    <Label>\n      в секунду: ~\n      <FormatedAmount total={totalProfit / interval / 30 / 24 / 60 / 60} />\n    </Label>\n  </div>\n);\n","import React, { Component } from \"react\";\nimport Amount from \"arui-feather/amount\";\nimport Input from \"arui-feather/input\";\nimport Heading from \"arui-feather/heading\";\nimport ThemeProvider from \"arui-feather/theme-provider\";\nimport Label from \"arui-feather/label\";\nimport { Line } from \"react-chartjs-2\";\n\nimport \"./app.css\";\nimport { Counters } from \"./Counters\";\n\nconst calculateData = (\n  rate = 1,\n  investments = 0,\n  startCapital = 0,\n  intervals = 2\n) => {\n  const pRate = Number(rate);\n  const pInvestments = Number(investments);\n  const pStartCapital = Number(startCapital);\n  const pIntervals = Number(intervals) + 1;\n  const dataPoints = [pStartCapital];\n\n  for (let i = 1; i < pIntervals; i++) {\n    const lastPoint = dataPoints[i - 1];\n    dataPoints[i] = pInvestments + lastPoint * (1 + pRate / 12 / 100);\n  }\n\n  return dataPoints;\n};\n\nconst calculateDataFactory = (investments, startCapital, intervals) => rate =>\n  calculateData(rate, investments, startCapital, intervals);\n\nclass App extends Component {\n  state = {\n    rate: 6,\n    investments: 5000,\n    startCapital: 50000,\n    interval: 12\n  };\n\n  handleRatioForm = value => {\n    this.setState({ rate: value });\n  };\n\n  handleInvestments = value => {\n    this.setState({ investments: value });\n  };\n\n  handleStartCapital = value => {\n    this.setState({ startCapital: value });\n  };\n\n  handleInterval = value => {\n    this.setState({ interval: value });\n  };\n\n  renderCurrency() {}\n\n  renderRatioForm() {\n    const options = {\n      label: \"Процентная ставка (%)\",\n      onChange: this.handleRatioForm,\n      value: String(this.state.rate),\n      type: \"number\",\n      width: \"available\"\n    };\n    return <Input {...options} />;\n  }\n\n  renderInvestments() {\n    const options = {\n      label: \"Ежемесячные инвестиции (рублей)\",\n      onChange: this.handleInvestments,\n      value: String(this.state.investments),\n      type: \"number\",\n      width: \"available\"\n    };\n    return <Input {...options} />;\n  }\n\n  renderStartCapital() {\n    const options = {\n      label: \"Стартовый капитал (рублей)\",\n      onChange: this.handleStartCapital,\n      value: String(this.state.startCapital),\n      type: \"number\",\n      width: \"available\"\n    };\n    return <Input {...options} />;\n  }\n\n  renderInterval() {\n    const options = {\n      label: \"Срок инвестирования (месяцев)\",\n      onChange: this.handleInterval,\n      value: String(this.state.interval),\n      type: \"number\",\n      width: \"available\"\n    };\n    return <Input {...options} />;\n  }\n\n  renderChart(\n    dataPoints0,\n    dataPoints25,\n    dataPoints75,\n    dataPoints100,\n    diff,\n    percent\n  ) {\n    const { interval }= this.state;\n    const labels = [...Array(Math.max(1, interval)).keys()].map(\n      item => item + 1\n    );\n\n    const baseStyle = {\n      fill: false,\n      lineTension: 0.1,\n      borderCapStyle: \"butt\",\n      borderDash: [],\n      borderDashOffset: 0.0,\n      borderJoinStyle: \"miter\",\n      pointBackgroundColor: \"#fff\",\n      pointBorderWidth: 1,\n      pointHoverRadius: 5,\n      pointHoverBorderWidth: 2,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      pointHoverBorderColor: \"rgba(220,220,220,1)\"\n    };\n    const data = {\n      labels,\n      datasets: [\n        {\n          ...baseStyle,\n          label: \"Размер денег с инвестициями\",\n          backgroundColor: \"rgba(75,192,192,0.4)\",\n          borderColor: \"rgba(75,192,192,1)\",\n          pointBorderColor: \"rgba(75,192,192,1)\",\n          pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n          data: dataPoints100\n        },\n        {\n          ...baseStyle,\n          label: \"Накопления под подушкой\",\n          backgroundColor: \"rgba(244, 66, 72, 0.4)\",\n          borderColor: \"rgb(244, 66, 72)\",\n          pointBorderColor: \"rgb(244, 66, 72)\",\n          pointBackgroundColor: \"#fff\",\n          pointHoverBackgroundColor: \"rgb(244, 66, 72)\",\n          data: dataPoints0\n        },\n        {\n          ...baseStyle,\n          label: \"Процент инвестиций x0.75\",\n          backgroundColor: \"rgba(241, 244, 66, 0.4)\",\n          borderColor: \"rgb(241, 244, 66)\",\n          pointBorderColor: \"rgb(241, 244, 66)\",\n          pointBackgroundColor: \"#fff\",\n          pointHoverBackgroundColor: \"rgb(241, 244, 66)\",\n          data: dataPoints75\n        },\n        {\n          ...baseStyle,\n          label: \"Процент инвестиций x0.25\",\n          backgroundColor: \"rgba(119, 66, 244, 0.4)\",\n          borderColor: \"rgb(119, 66, 244)\",\n          pointBorderColor: \"rgb(119, 66, 244)\",\n          pointBackgroundColor: \"#fff\",\n          pointHoverBackgroundColor: \"rgb(119, 66, 244)\",\n          data: dataPoints25\n        }\n      ]\n    };\n\n    const AMOUNT = {\n      value: diff,\n      currency: {\n        code: \"RUR\",\n        minority: 1\n      }\n    };\n    const total = dataPoints100[dataPoints100.length - 1];\n    const REINVEST = {\n      value: total,\n      currency: {\n        code: \"RUR\",\n        minority: 1\n      }\n    };\n\n    return (\n      <div className=\"chart\">\n        <Label>Разница в деньгах</Label> <Amount amount={AMOUNT} />{\" \"}\n        <Label>{(percent * 100).toFixed(2)} %</Label>\n        <br />\n        <Label>Получено за счет реинвестирования</Label>{\" \"}\n        <Amount amount={REINVEST} />\n        <br />\n        <div className=\"line-chart\">\n          <Line data={data} heigth={5000} />\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { rate, investments, startCapital, interval } = this.state;\n\n    const calculateData = calculateDataFactory(\n      investments,\n      startCapital,\n      interval\n    );\n\n    const invest0 = calculateData(0);\n    const invest25 = calculateData(rate * 0.25);\n    const invest75 = calculateData(rate * 0.75);\n    const invest100 = calculateData(rate);\n\n    const diff = invest100[invest100.length - 1] - invest0[invest0.length - 1];\n    const percent = diff / invest0[invest0.length - 1];\n\n    return (\n      <ThemeProvider theme=\"alfa-on-color\">\n        <div className=\"app\">\n          <Heading size=\"xl\">Калькулятор инвестиций</Heading>\n          <div className='finance'>\n            <div className=\"form\">\n              {this.renderRatioForm()}\n              {this.renderInvestments()}\n              {this.renderStartCapital()}\n              {this.renderInterval()}\n            </div>\n            <div className=\"counter-block\">\n              <Counters interval={interval} totalProfit={diff} />\n            </div>\n          </div>\n          {this.renderChart(\n            invest0,\n            invest25,\n            invest75,\n            invest100,\n            diff,\n            percent\n          )}\n        </div>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}